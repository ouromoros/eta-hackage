From dcebb5ac42780d3509abbcab3dea2db90709002d Mon Sep 17 00:00:00 2001
From: monser <ouromoros@gmail.com>
Date: Mon, 11 Jun 2018 15:42:16 +0800
Subject: [PATCH] Patched

---
 Data/Streaming/Filesystem.hs    | 58 ++++++++++++++++------------
 Data/Streaming/Network.hs       |  3 +-
 Data/Streaming/Text.hs          |  7 ++--
 Data/Streaming/Zlib/Lowlevel.hs | 68 ++++++++++++++++-----------------
 streaming-commons.cabal         | 12 ------
 5 files changed, 72 insertions(+), 76 deletions(-)

diff --git a/Data/Streaming/Filesystem.hs b/Data/Streaming/Filesystem.hs
index 6647b91..511d93e 100644
--- a/Data/Streaming/Filesystem.hs
+++ b/Data/Streaming/Filesystem.hs
@@ -58,36 +58,44 @@ getFileType fp = do
 
 #else
 
-import System.Posix.Directory (DirStream, openDirStream, closeDirStream)
-import qualified System.Posix.Directory as Posix
-import qualified System.Posix.Files as PosixF
+-- import System.Posix.Directory (DirStream, openDirStream, closeDirStream)
+-- import qualified System.Posix.Directory as Posix
+-- import qualified System.Posix.Files as PosixF
 import Control.Exception (try, IOException)
 
+newtype DirStream = DirStream ()
+
+openDirStream :: FilePath -> IO DirStream
+openDirStream = error "openDirStream: Not implemented yet."
+
+closeDirStream :: DirStream -> IO ()
+closeDirStream = error "closeDirStream: Not implemented yet."
+
 readDirStream :: DirStream -> IO (Maybe FilePath)
-readDirStream ds = do
-    fp <- Posix.readDirStream ds
-    case fp of
-        "" -> return Nothing
-        "." -> readDirStream ds
-        ".." -> readDirStream ds
-        _ -> return $ Just fp
+readDirStream ds = error "readDirStream: Not implemented yet."
+    -- fp <- Posix.readDirStream ds
+    -- case fp of
+    --     "" -> return Nothing
+    --     "." -> readDirStream ds
+    --     ".." -> readDirStream ds
+    --     _ -> return $ Just fp
 
 getFileType :: FilePath -> IO FileType
-getFileType fp = do
-    s <- PosixF.getSymbolicLinkStatus fp
-    case () of
-        ()
-            | PosixF.isRegularFile s -> return FTFile
-            | PosixF.isDirectory s -> return FTDirectory
-            | PosixF.isSymbolicLink s -> do
-                es' <- try $ PosixF.getFileStatus fp
-                case es' of
-                    Left (_ :: IOException) -> return FTOther
-                    Right s'
-                        | PosixF.isRegularFile s' -> return FTFileSym
-                        | PosixF.isDirectory s' -> return FTDirectorySym
-                        | otherwise -> return FTOther
-            | otherwise -> return FTOther
+getFileType fp = error "getFileType: Not implemented yet."
+    -- s <- PosixF.getSymbolicLinkStatus fp
+    -- case () of
+    --     ()
+    --         | PosixF.isRegularFile s -> return FTFile
+    --         | PosixF.isDirectory s -> return FTDirectory
+    --         | PosixF.isSymbolicLink s -> do
+    --             es' <- try $ PosixF.getFileStatus fp
+    --             case es' of
+    --                 Left (_ :: IOException) -> return FTOther
+    --                 Right s'
+    --                     | PosixF.isRegularFile s' -> return FTFileSym
+    --                     | PosixF.isDirectory s' -> return FTDirectorySym
+    --                     | otherwise -> return FTOther
+    --         | otherwise -> return FTOther
 
 #endif
 
diff --git a/Data/Streaming/Network.hs b/Data/Streaming/Network.hs
index 9db77a6..9355d20 100644
--- a/Data/Streaming/Network.hs
+++ b/Data/Streaming/Network.hs
@@ -143,6 +143,7 @@ defaultSocketOptions :: SocketType -> [(NS.SocketOption, Int)]
 defaultSocketOptions sockettype =
     case sockettype of
         NS.Datagram -> [(NS.ReuseAddr,1)]
+        NS.ServerSocket _ -> [(NS.ReuseAddr,1)]
         _           -> [(NS.NoDelay,1), (NS.ReuseAddr,1)]
 
 -- | Attempt to bind a listening @Socket@ on the given host/port using given
@@ -449,7 +450,7 @@ getSocketTCP host port = getSocketFamilyTCP host port NS.AF_UNSPEC
 -- the listen queue.
 bindPortTCP :: Int -> HostPreference -> IO Socket
 bindPortTCP p s = do
-    sock <- bindPortGen NS.Stream p s
+    sock <- bindPortGen (NS.ServerSocket NS.Stream) p s
     NS.listen sock (max 2048 NS.maxListenQueue)
     return sock
 
diff --git a/Data/Streaming/Text.hs b/Data/Streaming/Text.hs
index 543f950..e3ce7c8 100644
--- a/Data/Streaming/Text.hs
+++ b/Data/Streaming/Text.hs
@@ -95,12 +95,11 @@ getText j marr = do
     return $! text arr 0 j
 {-# INLINE getText #-}
 
-#include "text_cbits.h"
-
-foreign import ccall unsafe "_hs_streaming_commons_decode_utf8_state" c_decode_utf8_with_state
+c_decode_utf8_with_state
     :: MutableByteArray# s -> Ptr CSize
     -> Ptr (Ptr Word8) -> Ptr Word8
     -> Ptr CodePoint -> Ptr DecoderState -> IO (Ptr Word8)
+c_decode_utf8_with_state = error "c_decode_utf8_with_state: Not implemented yet."
 
 newtype CodePoint = CodePoint Word32 deriving (Eq, Show, Num, Storable)
 newtype DecoderState = DecoderState Word32 deriving (Eq, Show, Num, Storable)
@@ -150,7 +149,7 @@ decodeUtf8 = decodeChunk B.empty 0 0
                     | B.null bsOld = bs
                     | otherwise = B.append bsOld bs
               case unused `seq` state of
-                UTF8_REJECT ->
+                12 ->
                   -- We encountered an encoding error
                   return $! DecodeResultFailure chunkText unused
                 _ -> do
diff --git a/Data/Streaming/Zlib/Lowlevel.hs b/Data/Streaming/Zlib/Lowlevel.hs
index 4a66069..c28825b 100644
--- a/Data/Streaming/Zlib/Lowlevel.hs
+++ b/Data/Streaming/Zlib/Lowlevel.hs
@@ -38,12 +38,12 @@ data Strategy =
     | StrategyFixed
     deriving (Show,Eq,Ord,Enum)
 
-foreign import ccall unsafe "streaming_commons_create_z_stream"
-    zstreamNew :: IO ZStream'
+zstreamNew :: IO ZStream'
+zstreamNew = error "zstreamNew: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_deflate_init2"
-    c_deflateInit2 :: ZStream' -> CInt -> CInt -> CInt -> CInt
+c_deflateInit2 :: ZStream' -> CInt -> CInt -> CInt -> CInt
                    -> IO ()
+c_deflateInit2 = error "c_deflateInit2: Not implemented yet."
 
 deflateInit2 :: ZStream' -> Int -> WindowBits -> Int -> Strategy -> IO ()
 deflateInit2 zstream level windowBits memlevel strategy =
@@ -51,53 +51,53 @@ deflateInit2 zstream level windowBits memlevel strategy =
                    (fromIntegral memlevel)
                    (fromIntegral $ fromEnum strategy)
 
-foreign import ccall unsafe "streaming_commons_inflate_init2"
-    c_inflateInit2 :: ZStream' -> CInt -> IO ()
+c_inflateInit2 :: ZStream' -> CInt -> IO ()
+c_inflateInit2 = error "c_inflateInit2: Not implemented yet."
 
 inflateInit2 :: ZStream' -> WindowBits -> IO ()
 inflateInit2 zstream wb = c_inflateInit2 zstream (wbToInt wb)
 
-foreign import ccall unsafe "&streaming_commons_free_z_stream_inflate"
-    c_free_z_stream_inflate :: FunPtr (ZStream' -> IO ())
+c_free_z_stream_inflate :: FunPtr (ZStream' -> IO ())
+c_free_z_stream_inflate = error "c_free_z_stream_inflate: Not implemented yet."
 
-foreign import ccall unsafe "&streaming_commons_free_z_stream_deflate"
-    c_free_z_stream_deflate :: FunPtr (ZStream' -> IO ())
+c_free_z_stream_deflate :: FunPtr (ZStream' -> IO ())
+c_free_z_stream_deflate = error "c_free_z_stream_deflate: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_set_avail_in"
-    c_set_avail_in :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_set_avail_in :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_set_avail_in = error "c_set_avail_in: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_set_avail_out"
-    c_set_avail_out :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_set_avail_out :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_set_avail_out = error "c_set_avail_out: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_get_avail_out"
-    c_get_avail_out :: ZStream' -> IO CUInt
+c_get_avail_out :: ZStream' -> IO CUInt
+c_get_avail_out = error "c_get_avail_out: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_get_avail_in"
-    c_get_avail_in :: ZStream' -> IO CUInt
+c_get_avail_in :: ZStream' -> IO CUInt
+c_get_avail_in = error "c_get_avail_in: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_get_next_in"
-    c_get_next_in :: ZStream' -> IO (Ptr CChar)
+c_get_next_in :: ZStream' -> IO (Ptr CChar)
+c_get_next_in = error "c_get_next_in: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_call_inflate_noflush"
-    c_call_inflate_noflush :: ZStream' -> IO CInt
+c_call_inflate_noflush :: ZStream' -> IO CInt
+c_call_inflate_noflush = error "c_call_inflate_noflush: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_call_deflate_noflush"
-    c_call_deflate_noflush :: ZStream' -> IO CInt
+c_call_deflate_noflush :: ZStream' -> IO CInt
+c_call_deflate_noflush = error "c_call_deflate_noflush: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_call_deflate_finish"
-    c_call_deflate_finish :: ZStream' -> IO CInt
+c_call_deflate_finish :: ZStream' -> IO CInt
+c_call_deflate_finish = error "c_call_deflate_finish: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_call_deflate_flush"
-    c_call_deflate_flush :: ZStream' -> IO CInt
+c_call_deflate_flush :: ZStream' -> IO CInt
+c_call_deflate_flush = error "c_call_deflate_flush: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_call_deflate_full_flush"
-    c_call_deflate_full_flush :: ZStream' -> IO CInt
+c_call_deflate_full_flush :: ZStream' -> IO CInt
+c_call_deflate_full_flush = error "c_call_deflate_full_flush: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_deflate_set_dictionary"
-    c_call_deflate_set_dictionary :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_call_deflate_set_dictionary :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_call_deflate_set_dictionary = error "c_call_deflate_set_dictionary: Not implemented yet."
 
-foreign import ccall unsafe "streaming_commons_inflate_set_dictionary"
-    c_call_inflate_set_dictionary :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_call_inflate_set_dictionary :: ZStream' -> Ptr CChar -> CUInt -> IO ()
+c_call_inflate_set_dictionary = error "c_call_inflate_set_dictionary: Not implemented yet."
 
 wbToInt :: WindowBits -> CInt
 wbToInt (WindowBits i) = fromIntegral i
diff --git a/streaming-commons.cabal b/streaming-commons.cabal
index 6be347c..6e30ced 100644
--- a/streaming-commons.cabal
+++ b/streaming-commons.cabal
@@ -61,18 +61,6 @@ library
                      , transformers
                      , zlib
 
-  c-sources:           cbits/zlib-helper.c
-                       cbits/text-helper.c
-  include-dirs:        include
-
-  if os(windows)
-    build-depends:     Win32
-                     , filepath
-    cpp-options:       -DWINDOWS
-    other-modules:     System.Win32File
-  else
-    build-depends:     unix
-
   if flag(use-bytestring-builder)
     build-depends:     bytestring < 0.10.2.0
                      , bytestring-builder
-- 
2.17.1

